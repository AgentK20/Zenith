plugins {
	id 'fabric-loom' version '0.12-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven {
		name = "Parchment"
		url = 'https://maven.parchmentmc.org'
	}
	maven {
		name = "Porting Lib"
		url = "https://mvn.devos.one/snapshots/"
	}
	maven {
		name = "CCA"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		name = "Modrinth (Projectile Damage Attribute)"
		url = "https://api.modrinth.com/maven"
		content {
			includeGroup "maven.modrinth"
		}
	}
	maven { url "https://jitpack.io/" }
	maven { url "https://maven.jamieswhiteshirt.com/libs-release" }
	maven { url 'https://maven.blamejared.com' }
	maven { url "https://maven.shedaniel.me" }
	maven { url "https://maven.terraformersmc.com" }
	maven { url "https://cursemaven.com" }
	maven { url "https://maven.bai.lol" }

	mavenLocal()
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.layered() {
		officialMojangMappings()
		parchment("org.parchmentmc.data:parchment-1.20.1:2023.06.26@zip")
	}
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	modImplementation( "dev.shadowsoffire.placebo:placebo-fabric-1.20.1:${project.fakerlib_version}")
	modImplementation( "dev.shadowsoffire:attributeslib-template-1.20.1:${project.zenith_attributes_version}")

	// Mixin Extras + Mixin^2 for mod compat
	implementation(annotationProcessor("io.github.llamalad7:mixinextras-fabric:0.2.0-beta.10"))
	implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:0.0.2"))

	modImplementation("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_lib_version}")
	//modImplementation("io.github.fabricators_of_create.Porting-Lib:Porting-Lib:${project.port_lib_version}") { //not included as it is already included with fakerlib
	//	exclude(group: "io.github.fabricators_of_create.Porting-Lib", module: "networking")
	//	exclude(group: "io.github.fabricators_of_create.Porting-Lib", module: "loot")
	//}

	//idk how to opt out :(
	modImplementation("io.github.fabricators_of_create.Porting-Lib:accessors:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:attributes:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:base:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:client_events:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:common:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:core:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:entity:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:extensions:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:lazy_registration:${project.port_lib_version}")
	//modImplementation("io.github.fabricators_of_create.Porting-Lib:loot:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:mixin_extensions:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:models:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:registries:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:tags:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:tool_actions:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:transfer:${project.port_lib_version}")
	modImplementation("io.github.fabricators_of_create.Porting-Lib:utility:${project.port_lib_version}")

	modCompileOnly modRuntimeOnly("vazkii.patchouli:Patchouli:${project.patchouli_version}"), {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Fabric ASM
	modImplementation(include("com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"))

	// CCA + PAL
	modImplementation("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${project.cardinal_components_version}")
	modImplementation("io.github.ladysnake:PlayerAbilityLib:${project.pal_version}")
	modImplementation("maven.modrinth:projectile-damage-attribute:${project.projectile_damage}-fabric")

	// ModMenu
	modCompileOnly modRuntimeOnly("com.terraformersmc:modmenu:${project.modmenu_version}"), {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Trinkets
	modCompileOnly modRuntimeOnly("dev.emi:trinkets:${project.trinkets_version}")

	// WTHIT
	modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}"
	//modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${project.wthit_version}"

	// REI + Arch
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	modRuntimeOnly "dev.architectury:architectury-fabric:${project.arch_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin-fabric:${project.rei_version}"

	//Jade
	modImplementation "curse.maven:jade-324717:${jade_id}"

	//Other Mods for Testing
	//modCompileOnly "com.mrcrayfish:goblintraders-fabric:1.8.1-1.19.2"

}
loom {
	accessWidenerPath = file("src/main/resources/zenith.aw")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {

}


jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}

}

publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	repositories {

	}
}
