plugins {
	id 'fabric-loom' version '0.11-SNAPSHOT'
	id 'maven-publish'
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
	maven { url 'https://jitpack.io' }

	maven { url = "https://mvn.devos.one/releases/" }
	maven { url = "https://mvn.devos.one/snapshots/" }

	maven { url "https://maven.jamieswhiteshirt.com/libs-release" }

	maven { url = "https://maven.cafeteria.dev" }

	maven { url 'https://maven.blamejared.com' }

	maven { url "https://maven.shedaniel.me" }

	maven { url "https://maven.terraformersmc.com" }

	maven { url = "https://ladysnake.jfrog.io/artifactory/mods" }

	maven { url "https://cursemaven.com" }

	maven { url "https://maven.bai.lol" }
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings loom.officialMojangMappings()
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// Reach Library
	modImplementation(include("com.jamieswhiteshirt:reach-entity-attributes:${project.reach_lib_version}"))

	// Fake Player API
	modImplementation(include("dev.cafeteria:fake-player-api:${project.fpa_version}"))

	// Porting Lib
	modImplementation(include("io.github.fabricators_of_create:Porting-Lib:${project.port_lib_version}+${project.minecraft_version}.${project.port_lib_hash}"))


	// ******************** Optional Deps ******************** //

	// Patchouli
	modCompileOnly modRuntimeOnly("vazkii.patchouli:Patchouli:${project.patchouli_version}"),{
		exclude(group: "net.fabricmc.fabric-api")
	}

	// REI
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-api-fabric:${project.rei_version}"
	modRuntimeOnly "me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}"
	modCompileOnly "me.shedaniel:RoughlyEnoughItems-default-plugin:${project.rei_version}"

	// ModMenu
	modCompileOnly modRuntimeOnly("com.terraformersmc:modmenu:${project.modmenu_version}"), {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// Trinkets
	modCompileOnly modRuntimeOnly("dev.emi:trinkets:${trinkets_version}")

	// TOP
	modCompileOnly modRuntimeOnly("curse.maven:top-581847:${top_version}")

	// WTHIT
	modCompileOnly "mcp.mobius.waila:wthit-api:fabric-${wthit_version}"
	modRuntimeOnly "mcp.mobius.waila:wthit:fabric-${wthit_version}"
}

loom {
	accessWidenerPath = file("src/main/resources/apotheosis.aw")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}
